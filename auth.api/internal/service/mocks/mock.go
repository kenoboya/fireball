// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "auth-api/internal/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// EntranceViaSocialMedia mocks base method.
func (m *MockAuth) EntranceViaSocialMedia(ctx context.Context, request model.SocialMediaRequest) (model.Tokens, model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntranceViaSocialMedia", ctx, request)
	ret0, _ := ret[0].(model.Tokens)
	ret1, _ := ret[1].(model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EntranceViaSocialMedia indicates an expected call of EntranceViaSocialMedia.
func (mr *MockAuthMockRecorder) EntranceViaSocialMedia(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntranceViaSocialMedia", reflect.TypeOf((*MockAuth)(nil).EntranceViaSocialMedia), ctx, request)
}

// GetAccessTokenTTL mocks base method.
func (m *MockAuth) GetAccessTokenTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetAccessTokenTTL indicates an expected call of GetAccessTokenTTL.
func (mr *MockAuthMockRecorder) GetAccessTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenTTL", reflect.TypeOf((*MockAuth)(nil).GetAccessTokenTTL))
}

// GetRefreshTokenTTL mocks base method.
func (m *MockAuth) GetRefreshTokenTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRefreshTokenTTL indicates an expected call of GetRefreshTokenTTL.
func (mr *MockAuthMockRecorder) GetRefreshTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenTTL", reflect.TypeOf((*MockAuth)(nil).GetRefreshTokenTTL))
}

// Refresh mocks base method.
func (m *MockAuth) Refresh(ctx context.Context, refreshToken string) (model.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, refreshToken)
	ret0, _ := ret[0].(model.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthMockRecorder) Refresh(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuth)(nil).Refresh), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockAuth) SignIn(ctx context.Context, requestSignIn model.UserSignIn) (model.Tokens, model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, requestSignIn)
	ret0, _ := ret[0].(model.Tokens)
	ret1, _ := ret[1].(model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthMockRecorder) SignIn(ctx, requestSignIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuth)(nil).SignIn), ctx, requestSignIn)
}

// SignUp mocks base method.
func (m *MockAuth) SignUp(ctx context.Context, userSignUp model.UserSignUp) (model.Tokens, model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, userSignUp)
	ret0, _ := ret[0].(model.Tokens)
	ret1, _ := ret[1].(model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthMockRecorder) SignUp(ctx, userSignUp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuth)(nil).SignUp), ctx, userSignUp)
}

// VerifyCode mocks base method.
func (m *MockAuth) VerifyCode(ctx context.Context, login string) (model.VerifyCodeInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", ctx, login)
	ret0, _ := ret[0].(model.VerifyCodeInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockAuthMockRecorder) VerifyCode(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockAuth)(nil).VerifyCode), ctx, login)
}

// VerifyToken mocks base method.
func (m *MockAuth) VerifyToken(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthMockRecorder) VerifyToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuth)(nil).VerifyToken), ctx, accessToken)
}

// MockNotifications is a mock of Notifications interface.
type MockNotifications struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsMockRecorder
	isgomock struct{}
}

// MockNotificationsMockRecorder is the mock recorder for MockNotifications.
type MockNotificationsMockRecorder struct {
	mock *MockNotifications
}

// NewMockNotifications creates a new mock instance.
func NewMockNotifications(ctrl *gomock.Controller) *MockNotifications {
	mock := &MockNotifications{ctrl: ctrl}
	mock.recorder = &MockNotificationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifications) EXPECT() *MockNotificationsMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockNotifications) SendNotification(ctx context.Context, notRMQ model.NotificationRabbitMQ, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, notRMQ, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationsMockRecorder) SendNotification(ctx, notRMQ, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotifications)(nil).SendNotification), ctx, notRMQ, data)
}
